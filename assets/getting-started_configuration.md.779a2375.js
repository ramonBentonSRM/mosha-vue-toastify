import{o as n,c as t,d as s}from"./app.d1e3bcce.js";const a='{"title":"Configuration","description":"","frontmatter":{},"headers":[{"level":2,"title":"Configuration","slug":"configuration"}],"relativePath":"getting-started/configuration.md","lastUpdated":1629043312531}',o={},e=s('<h2 id="configuration"><a class="header-anchor" href="#configuration" aria-hidden="true">#</a> Configuration</h2><p>The <code>createToast</code> function accepts 2 arguments:</p><ul><li><p><strong>First argument</strong>:</p><ul><li>It can be just a string or a object like this: <code>{ title: &#39;some title&#39;, description: &#39;some good description&#39;}</code>. By the way, description now accepts html, for more customization, we recommand trying out the custom component approach</li><li>It can also accept a Vue 3 component or a VNode if you need more customization, e.g.</li></ul><div class="language-ts"><pre><code>  <span class="token comment">// without props</span>\n  <span class="token keyword">import</span> <span class="token punctuation">{</span> createToast <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;mosha-vue-toastify&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">import</span> CustomizedContent <span class="token keyword">from</span> <span class="token string">&quot;./CustomizedContent.vue&quot;</span><span class="token punctuation">;</span>\n  <span class="token keyword">import</span> <span class="token string">&#39;mosha-vue-toastify/dist/style.css&#39;</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token function">setup</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> <span class="token function-variable function">toast</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          <span class="token function">createToast</span><span class="token punctuation">(</span>CustomizedContent<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span> toast <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><div class="language-ts"><pre><code>  <span class="token comment">// with props</span>\n  <span class="token keyword">import</span> <span class="token punctuation">{</span> createToast<span class="token punctuation">,</span> withProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;mosha-vue-toastify&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">import</span> CustomizedContent <span class="token keyword">from</span> <span class="token string">&quot;./CustomizedContent.vue&quot;</span><span class="token punctuation">;</span>\n  <span class="token keyword">import</span> <span class="token string">&#39;mosha-vue-toastify/dist/style.css&#39;</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token function">setup</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> <span class="token function-variable function">toast</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          <span class="token function">createToast</span><span class="token punctuation">(</span><span class="token function">withProps</span><span class="token punctuation">(</span>CustomizedContent<span class="token punctuation">,</span> <span class="token punctuation">{</span> yourFavProp<span class="token operator">:</span> <span class="token string">&#39;bruh&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span> toast <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div></li><li><p><strong>Second argument</strong>: the second argument is an options object.</p><table><thead><tr><th>name</th><th style="text-align:center;">type</th><th style="text-align:right;">default</th><th style="text-align:right;">description</th></tr></thead><tbody><tr><td>type</td><td style="text-align:center;">&#39;info&#39;, &#39;danger&#39;, &#39;warning&#39;, &#39;success&#39;, &#39;default&#39;</td><td style="text-align:right;">&#39;default&#39;</td><td style="text-align:right;">Give the toast different styles and icons.</td></tr><tr><td>timeout</td><td style="text-align:center;">number</td><td style="text-align:right;">5000</td><td style="text-align:right;">How many ms you want the toggle to close itself?</td></tr><tr><td>position</td><td style="text-align:center;">&#39;top-left&#39;, &#39;top-right&#39;, &#39;bottom-left&#39;, &#39;bottom-right&#39;, &#39;top-center&#39;, &#39;bottom-center&#39;</td><td style="text-align:right;">&#39;top-right&#39;</td><td style="text-align:right;">Where do you want the toast to appear?</td></tr><tr><td>showCloseButton</td><td style="text-align:center;">boolean</td><td style="text-align:right;">true</td><td style="text-align:right;">Do you wanna show the close button ?</td></tr><tr><td>showIcon</td><td style="text-align:center;">boolean</td><td style="text-align:right;">false</td><td style="text-align:right;">Do you wanna show the icon ?</td></tr><tr><td>transition</td><td style="text-align:center;">&#39;bounce&#39;, &#39;zoom&#39;, &#39;slide&#39;</td><td style="text-align:right;">&#39;bounce&#39;</td><td style="text-align:right;">Which animation do you want?</td></tr><tr><td>hideProgressBar</td><td style="text-align:center;">boolean</td><td style="text-align:right;">false</td><td style="text-align:right;">Do we wanna hide the fancy progress bar?</td></tr><tr><td>swipeClose</td><td style="text-align:center;">boolean</td><td style="text-align:right;">true</td><td style="text-align:right;">Allows the user swipe close the toast</td></tr><tr><td>toastBackgroundColor</td><td style="text-align:center;">string</td><td style="text-align:right;">default color</td><td style="text-align:right;">Customize the background color of the toast.</td></tr><tr><td>onClose</td><td style="text-align:center;">function</td><td style="text-align:right;">N/A</td><td style="text-align:right;">This function will be called at the end of the toast&#39;s lifecycle</td></tr></tbody></table></li><li><p><strong>Programatically closing</strong> The <code>createToast</code> function returns an object that contains a <code>close</code> funtion that allows the user to programatically dismiss the toast. See below:</p><div class="language-ts"><pre><code>    <span class="token keyword">import</span> <span class="token punctuation">{</span> createToast <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;mosha-vue-toastify&#39;</span><span class="token punctuation">;</span>\n    <span class="token keyword">import</span> CustomizedContent <span class="token keyword">from</span> <span class="token string">&quot;./CustomizedContent.vue&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">import</span> <span class="token string">&#39;mosha-vue-toastify/dist/style.css&#39;</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token function">setup</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> <span class="token function-variable function">toast</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token comment">// This close function can be used to close the toast</span>\n            <span class="token keyword">const</span> <span class="token punctuation">{</span> close <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">createToast</span><span class="token punctuation">(</span>CustomizedContent<span class="token punctuation">)</span>\n            <span class="token comment">// close()</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">return</span> <span class="token punctuation">{</span> toast <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>To clear all the toasts, use the <code>clearToasts</code> function. See below</p><div class="language-ts"><pre><code>    <span class="token keyword">import</span> <span class="token punctuation">{</span> createToast<span class="token punctuation">,</span> clearToasts <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;mosha-vue-toastify&#39;</span><span class="token punctuation">;</span>\n    <span class="token keyword">import</span> CustomizedContent <span class="token keyword">from</span> <span class="token string">&quot;./CustomizedContent.vue&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">import</span> <span class="token string">&#39;mosha-vue-toastify/dist/style.css&#39;</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token function">setup</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> <span class="token function-variable function">clear</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          <span class="token comment">// clears all the toasts</span>\n          <span class="token function">clearToasts</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">return</span> <span class="token punctuation">{</span> clear <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div></li></ul>',3);o.render=function(s,a,o,p,c,l){return n(),t("div",null,[e])};export default o;export{a as __pageData};
